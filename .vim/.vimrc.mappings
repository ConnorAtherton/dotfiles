"/
"/ NERDTree
"/
nmap <Leader>n :NERDTreeToggle<CR>

" Make it look a little pretty
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

" Behavior that feels more natural
" Automatically delete buffers from files deleted in NERDTree
let NERDTreeAutoDeleteBuffer = 1

" Quit NT when opened a file (this matches my usual workflow)
let NERDTreeQuitOnOpen = 1

" Settings only applicable to NERDTree buffers
autocmd! BufEnter * call EnableNerdTreeBuffer()
function! EnableNerdTreeBuffer()
  if (bufname("%") =~ "NERD_Tree_")
    setlocal nocursorcolumn
    setlocal nonumber
  endif
endfunction

"/
"/ CTRLP
"/
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>T :CtrlPBufTag<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>F :CtrlPCurWD<CR>
nnoremap <leader>M :CtrlPMRUFiles<CR>
nnoremap <leader>l :CtrlPLine<CR>

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|dist\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

"/
"/ Airline
"/
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.readonly = '∅'

"/
"/ Ale
"/
" TODO: Still testing this. Will add config if required.

"/
"/ YCM
"/
"/ I find it easier to use tab for complete and
"/ other mappings for cycling through ycm suggestions.
"/
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_next_completion = ['<c-j>', '<down>']
let g:ycm_key_list_previous_completion = ['<c-k>', '<up>']

" We will keep the default conf here for .c and .cc files
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

"/
"/ Tagbar
"/
nnoremap <Leader>. :TagbarToggle<CR>

"/
"/ Instant Markdown
"/
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

"/
"/ Scratch buffer
"/
nnoremap <Leader>sc :Scratch<CR>

"/
"/ Markdown
"/
let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'python', 'bash=sh']

"/
"/ JSX support
"/
let g:jsx_ext_required = 0

"/
"/  Gitgutter
"/
let g:gitgutter_map_keys = 0
let g:gitgutter_diff_args = '-w'

"/
"/  Goyo
"/
" TODO:
" - if filetype is txt or md, enable spelling and grammar
function! ProseMode()
  call goyo#execute(0, [])
  " TODO: Not sure what this does
  set complete+=s
  " Check out the goyo hooks for tmux settings in: goyo_ente and goyo_leave
endfunction

command! ProseMode call ProseMode()
nmap <Leader>p :ProseMode<CR>

function! s:goyo_enter()
  silent !tmux set status off
  set nocursorcolumn
  set nocursorline
  set noshowmode
  set noshowcmd
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  set cursorcolumn
  set cursorline
  set showmode
  set showcmd
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()