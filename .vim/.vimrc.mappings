"/
"/ NERDTree
"/
nmap <Leader>n :NERDTreeToggle<CR>
" Make it look a little pretty
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

" Behavior that feels more natural
" Automatically delete buffers from files deleted in NERDTree
let NERDTreeAutoDeleteBuffer = 1

" Settings only applicable to NERDTree buffers
autocmd! BufEnter * call EnableNerdTreeBuffer()
function! EnableNerdTreeBuffer()
  if (bufname("%") =~ "NERD_Tree_")
    setlocal nocursorcolumn
    setlocal nonumber
  endif
endfunction

let g:NERDTreeGitStatusIndicatorMapCustom = {
  \ 'Modified'  :'✹',
  \ 'Staged'    :'✚',
  \ 'Untracked' :'✭',
  \ 'Renamed'   :'➜',
  \ 'Unmerged'  :'═',
  \ 'Deleted'   :'✖',
  \ 'Dirty'     :'✗',
  \ 'Ignored'   :'☒',
  \ 'Clean'     :'✔︎',
  \ 'Unknown'   :'?',
  \ }

"/
"/ CTRLP
"/
nnoremap <leader>f :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>T :CtrlPBufTag<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>F :CtrlPCurWD<CR>
nnoremap <leader>M :CtrlPMRUFiles<CR>
nnoremap <leader>l :CtrlPLine<CR>

let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
let g:ctrlp_use_caching = 1
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|dist\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

"/
"/ Airline
"/
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_left_sep = ''
let g:airline_right_sep = ''

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.readonly = '∅'

"/
"/ Automatic checks
"/
" When writing a buffer (no delay), and on normal mode changes (after 750ms).
call neomake#configure#automake('nw', 750)

"/
"/ Ale
"/
let g:ale_set_highlights = 0 " signs are enough
let g:ale_cursor_detail = 0
let g:ale_close_preview_on_insert = 1
let g:ale_fixers = {'rust': ['rustfmt'], 'ruby': ['bundle exec rubocop -a'], 'javascript': ['prettier', 'eslint']}
let g:ale_lint_delay = 1000

"/
"/ Tagbar
"/
nnoremap <Leader>. :TagbarToggle<CR>

"/
"/ Instant Markdown
"/
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

"/
"/ Scratch buffer
"/
nnoremap <Leader>sc :Scratch<CR>

"/
"/ Markdown
"/
let g:markdown_fenced_languages = ['html', 'vim', 'ruby', 'python', 'bash=sh', 'typescript', 'javascript']

"/
"/ JSX support
"/
let g:jsx_ext_required = 0

"/
"/  Gitgutter
"/
let g:gitgutter_map_keys = 0
let g:gitgutter_diff_args = '-w'

"/
"/ Deoplete -- for autocompletion
"/
let g:deoplete#enable_at_startup = 1

"/
"/ Color schema configurations
"/
let g:nord_italic = 1
let g:nord_underline = 1
let g:nord_uniform_diff_background = 1
let g:nord_cursor_line_number_background = 1

"/
"/ JavaScript configuration
"/
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

"Add extra filetypes
let g:tern#arguments = ["--persistent", "--no-port-file"]
let g:deoplete#sources#ternjs#types = 1
let g:deoplete#sources#ternjs#filetypes = [
      \ 'js',
      \ 'jsx',
      \ 'vue',
      \ ]

"/
"/  Goyo
"/
" TODO:
" - if filetype is txt or md, enable spelling and grammar
function! ProseMode()
  call goyo#execute(0, [])
  " TODO: Not sure what this does
  set complete+=s
  " Check out the goyo hooks for tmux settings in: goyo_ente and goyo_leave
endfunction

command! ProseMode call ProseMode()
nmap <Leader>p :ProseMode<CR>
function! s:goyo_enter()
  silent !tmux set status off
  set nocursorcolumn
  set nocursorline
  set noshowmode
  set noshowcmd
endfunction

function! s:goyo_leave()
  silent !tmux set status on
  set cursorcolumn
  set cursorline
  set showmode
  set showcmd
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 1

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1
