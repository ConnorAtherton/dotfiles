[alias]
  # View the current working tree status using the short format
  s = status -s

  # Helper to undo the last commit
  undo = !git reset HEAD~1 --mixed

  # Prettier default view for
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%an %cr)%Creset' --abbrev-commit --date=relative

  # Clone a repository including all submodules
  c = clone --recursive

  # Amend the currently staged files to the latest commit. This is what I
  # usually do anyway.
	amend = commit --amend --reuse-message=HEAD

  # Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

  # Show all aliases (Good when first learning)
  alias=!git config -l | grep ^alias | cut -c 7- | sort

  # Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

  # list files which have changed since REVIEW_BASE
  # (REVIEW_BASE defaults to 'master' in my zshrc)
  files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")

  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")

  # Open all files changed since REVIEW_BASE in Vim tabs
  # Then, run fugitive's :Gdiff in each tab, and finally
  # tell vim-gitgutter to show +/- for changes since REVIEW_BASE
  review = !vim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

  # Same as the above, except specify names of files as arguments,
  # instead of opening all files:
  # git reviewone foo.js bar.js
  reviewone = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

  # Prints out just hashes for latest commit. Useful
  # for plugging into tools further along to check commit status.
  latest = log --oneline origin/master --first-parent -n 20 --format="%H"

  dangling = branch --no-merged origin/master --sort=-committerdate

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[diff]
	# Detect copies as well as renames
	renames = copies

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

; [http]
; 	cookiefile = ~/.gitcookies

; [gpg]
; 	program = gpg2

[user]
	name = Connor Atherton
	email = catherton@auction.com
[gpg]
	program = gpg
[commit]
	gpgsign = false

# Delta overrides...
[core]
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  features = side-by-side line-numbers decorations
  whitespace-error-style = 22 reverse

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
